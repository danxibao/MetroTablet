//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Project_try
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Project_try.Project_try_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Project_try.Project_try_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Project_try.Project_try_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Project_try.Project_try_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[40];
            _typeNameTable[0] = "Project_try.AudioVisual.Article";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "Project_try.Common.ObservableDictionary";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Project_try.Common.NavigationHelper";
            _typeNameTable[7] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[8] = "Project_try.AudioVisualMain";
            _typeNameTable[9] = "Project_try.AudioVisual.Interview";
            _typeNameTable[10] = "Project_try.AudioVisual.Movie";
            _typeNameTable[11] = "Project_try.AudioVisual.Video";
            _typeNameTable[12] = "Project_try.Music.SingAloud";
            _typeNameTable[13] = "Project_try.Music.MusicDestress";
            _typeNameTable[14] = "Project_try.Music.Admiration";
            _typeNameTable[15] = "Project_try.Music.MusicHypnosis";
            _typeNameTable[16] = "Project_try.Music.Motivation";
            _typeNameTable[17] = "Project_try.Music.MusicMain";
            _typeNameTable[18] = "Project_try.Pictures.Illusion";
            _typeNameTable[19] = "Project_try.Pictures.PicMain";
            _typeNameTable[20] = "Project_try.Pictures.Pun";
            _typeNameTable[21] = "Project_try.Start";
            _typeNameTable[22] = "Project_try.Main";
            _typeNameTable[23] = "Project_try.AudioSettings";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.SettingsFlyout";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[26] = "Project_try.HelpSettings";
            _typeNameTable[27] = "Project_try.PrivacySettings";
            _typeNameTable[28] = "Project_try.VideoSettings";
            _typeNameTable[29] = "Project_try.ChangePassword";
            _typeNameTable[30] = "Project_try.User_info";
            _typeNameTable[31] = "Project_try.Pictures.Nature";
            _typeNameTable[32] = "Project_try.Login";
            _typeNameTable[33] = "Project_try.Register";
            _typeNameTable[34] = "Project_try.Self_test";
            _typeNameTable[35] = "Project_try.test_e";
            _typeNameTable[36] = "Project_try.test_d";
            _typeNameTable[37] = "Project_try.test_c";
            _typeNameTable[38] = "Project_try.test_b";
            _typeNameTable[39] = "Project_try.test_a";

            _typeTable = new global::System.Type[40];
            _typeTable[0] = typeof(global::Project_try.AudioVisual.Article);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::Project_try.Common.ObservableDictionary);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::Project_try.Common.NavigationHelper);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[8] = typeof(global::Project_try.AudioVisualMain);
            _typeTable[9] = typeof(global::Project_try.AudioVisual.Interview);
            _typeTable[10] = typeof(global::Project_try.AudioVisual.Movie);
            _typeTable[11] = typeof(global::Project_try.AudioVisual.Video);
            _typeTable[12] = typeof(global::Project_try.Music.SingAloud);
            _typeTable[13] = typeof(global::Project_try.Music.MusicDestress);
            _typeTable[14] = typeof(global::Project_try.Music.Admiration);
            _typeTable[15] = typeof(global::Project_try.Music.MusicHypnosis);
            _typeTable[16] = typeof(global::Project_try.Music.Motivation);
            _typeTable[17] = typeof(global::Project_try.Music.MusicMain);
            _typeTable[18] = typeof(global::Project_try.Pictures.Illusion);
            _typeTable[19] = typeof(global::Project_try.Pictures.PicMain);
            _typeTable[20] = typeof(global::Project_try.Pictures.Pun);
            _typeTable[21] = typeof(global::Project_try.Start);
            _typeTable[22] = typeof(global::Project_try.Main);
            _typeTable[23] = typeof(global::Project_try.AudioSettings);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.SettingsFlyout);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[26] = typeof(global::Project_try.HelpSettings);
            _typeTable[27] = typeof(global::Project_try.PrivacySettings);
            _typeTable[28] = typeof(global::Project_try.VideoSettings);
            _typeTable[29] = typeof(global::Project_try.ChangePassword);
            _typeTable[30] = typeof(global::Project_try.User_info);
            _typeTable[31] = typeof(global::Project_try.Pictures.Nature);
            _typeTable[32] = typeof(global::Project_try.Login);
            _typeTable[33] = typeof(global::Project_try.Register);
            _typeTable[34] = typeof(global::Project_try.Self_test);
            _typeTable[35] = typeof(global::Project_try.test_e);
            _typeTable[36] = typeof(global::Project_try.test_d);
            _typeTable[37] = typeof(global::Project_try.test_c);
            _typeTable[38] = typeof(global::Project_try.test_b);
            _typeTable[39] = typeof(global::Project_try.test_a);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_Article() { return new global::Project_try.AudioVisual.Article(); }
        private object Activate_3_ObservableDictionary() { return new global::Project_try.Common.ObservableDictionary(); }
        private object Activate_8_AudioVisualMain() { return new global::Project_try.AudioVisualMain(); }
        private object Activate_9_Interview() { return new global::Project_try.AudioVisual.Interview(); }
        private object Activate_10_Movie() { return new global::Project_try.AudioVisual.Movie(); }
        private object Activate_11_Video() { return new global::Project_try.AudioVisual.Video(); }
        private object Activate_12_SingAloud() { return new global::Project_try.Music.SingAloud(); }
        private object Activate_13_MusicDestress() { return new global::Project_try.Music.MusicDestress(); }
        private object Activate_14_Admiration() { return new global::Project_try.Music.Admiration(); }
        private object Activate_15_MusicHypnosis() { return new global::Project_try.Music.MusicHypnosis(); }
        private object Activate_16_Motivation() { return new global::Project_try.Music.Motivation(); }
        private object Activate_17_MusicMain() { return new global::Project_try.Music.MusicMain(); }
        private object Activate_18_Illusion() { return new global::Project_try.Pictures.Illusion(); }
        private object Activate_19_PicMain() { return new global::Project_try.Pictures.PicMain(); }
        private object Activate_20_Pun() { return new global::Project_try.Pictures.Pun(); }
        private object Activate_21_Start() { return new global::Project_try.Start(); }
        private object Activate_22_Main() { return new global::Project_try.Main(); }
        private object Activate_23_AudioSettings() { return new global::Project_try.AudioSettings(); }
        private object Activate_26_HelpSettings() { return new global::Project_try.HelpSettings(); }
        private object Activate_27_PrivacySettings() { return new global::Project_try.PrivacySettings(); }
        private object Activate_28_VideoSettings() { return new global::Project_try.VideoSettings(); }
        private object Activate_29_ChangePassword() { return new global::Project_try.ChangePassword(); }
        private object Activate_30_User_info() { return new global::Project_try.User_info(); }
        private object Activate_31_Nature() { return new global::Project_try.Pictures.Nature(); }
        private object Activate_32_Login() { return new global::Project_try.Login(); }
        private object Activate_33_Register() { return new global::Project_try.Register(); }
        private object Activate_34_Self_test() { return new global::Project_try.Self_test(); }
        private object Activate_35_test_e() { return new global::Project_try.test_e(); }
        private object Activate_36_test_d() { return new global::Project_try.test_d(); }
        private object Activate_37_test_c() { return new global::Project_try.test_c(); }
        private object Activate_38_test_b() { return new global::Project_try.test_b(); }
        private object Activate_39_test_a() { return new global::Project_try.test_a(); }
        private void MapAdd_3_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Project_try.Project_try_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Project_try.Project_try_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Project_try.AudioVisual.Article
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_Article;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Project_try.Project_try_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Project_try.Project_try_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Project_try.Common.ObservableDictionary
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_3_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::Project_try.Project_try_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String
                xamlType = new global::Project_try.Project_try_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Project_try.Common.NavigationHelper
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Project_try.Project_try_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Project_try.AudioVisualMain
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_8_AudioVisualMain;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Project_try.AudioVisual.Interview
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_9_Interview;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Project_try.AudioVisual.Movie
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_Movie;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Project_try.AudioVisual.Video
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_11_Video;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Project_try.Music.SingAloud
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_12_SingAloud;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Project_try.Music.MusicDestress
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_13_MusicDestress;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Project_try.Music.Admiration
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_14_Admiration;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Project_try.Music.MusicHypnosis
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_15_MusicHypnosis;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Project_try.Music.Motivation
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_Motivation;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Project_try.Music.MusicMain
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_MusicMain;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Project_try.Pictures.Illusion
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_18_Illusion;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Project_try.Pictures.PicMain
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_PicMain;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Project_try.Pictures.Pun
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_Pun;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Project_try.Start
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_Start;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Project_try.Main
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_Main;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Project_try.AudioSettings
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_23_AudioSettings;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Controls.SettingsFlyout
                xamlType = new global::Project_try.Project_try_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Project_try.Project_try_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Project_try.HelpSettings
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_26_HelpSettings;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Project_try.PrivacySettings
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_27_PrivacySettings;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Project_try.VideoSettings
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_28_VideoSettings;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Project_try.ChangePassword
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_ChangePassword;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Project_try.User_info
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_User_info;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Project_try.Pictures.Nature
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_Nature;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Project_try.Login
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_Login;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Project_try.Register
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_Register;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  Project_try.Self_test
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_Self_test;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Project_try.test_e
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_test_e;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Project_try.test_d
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_36_test_d;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Project_try.test_c
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_37_test_c;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Project_try.test_b
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_test_b;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Project_try.test_a
                userType = new global::Project_try.Project_try_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_39_test_a;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_Article_DefaultViewModel(object instance)
        {
            var that = (global::Project_try.AudioVisual.Article)instance;
            return that.DefaultViewModel;
        }
        private object get_1_Article_NavigationHelper(object instance)
        {
            var that = (global::Project_try.AudioVisual.Article)instance;
            return that.NavigationHelper;
        }
        private object get_2_AudioVisualMain_DefaultViewModel(object instance)
        {
            var that = (global::Project_try.AudioVisualMain)instance;
            return that.DefaultViewModel;
        }
        private object get_3_AudioVisualMain_NavigationHelper(object instance)
        {
            var that = (global::Project_try.AudioVisualMain)instance;
            return that.NavigationHelper;
        }
        private object get_4_Interview_DefaultViewModel(object instance)
        {
            var that = (global::Project_try.AudioVisual.Interview)instance;
            return that.DefaultViewModel;
        }
        private object get_5_Interview_NavigationHelper(object instance)
        {
            var that = (global::Project_try.AudioVisual.Interview)instance;
            return that.NavigationHelper;
        }
        private object get_6_Movie_DefaultViewModel(object instance)
        {
            var that = (global::Project_try.AudioVisual.Movie)instance;
            return that.DefaultViewModel;
        }
        private object get_7_Movie_NavigationHelper(object instance)
        {
            var that = (global::Project_try.AudioVisual.Movie)instance;
            return that.NavigationHelper;
        }
        private object get_8_Video_DefaultViewModel(object instance)
        {
            var that = (global::Project_try.AudioVisual.Video)instance;
            return that.DefaultViewModel;
        }
        private object get_9_Video_NavigationHelper(object instance)
        {
            var that = (global::Project_try.AudioVisual.Video)instance;
            return that.NavigationHelper;
        }
        private object get_10_SingAloud_DefaultViewModel(object instance)
        {
            var that = (global::Project_try.Music.SingAloud)instance;
            return that.DefaultViewModel;
        }
        private object get_11_SingAloud_NavigationHelper(object instance)
        {
            var that = (global::Project_try.Music.SingAloud)instance;
            return that.NavigationHelper;
        }
        private object get_12_MusicDestress_DefaultViewModel(object instance)
        {
            var that = (global::Project_try.Music.MusicDestress)instance;
            return that.DefaultViewModel;
        }
        private object get_13_MusicDestress_NavigationHelper(object instance)
        {
            var that = (global::Project_try.Music.MusicDestress)instance;
            return that.NavigationHelper;
        }
        private object get_14_Admiration_DefaultViewModel(object instance)
        {
            var that = (global::Project_try.Music.Admiration)instance;
            return that.DefaultViewModel;
        }
        private object get_15_Admiration_NavigationHelper(object instance)
        {
            var that = (global::Project_try.Music.Admiration)instance;
            return that.NavigationHelper;
        }
        private object get_16_MusicHypnosis_DefaultViewModel(object instance)
        {
            var that = (global::Project_try.Music.MusicHypnosis)instance;
            return that.DefaultViewModel;
        }
        private object get_17_MusicHypnosis_NavigationHelper(object instance)
        {
            var that = (global::Project_try.Music.MusicHypnosis)instance;
            return that.NavigationHelper;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Project_try.Project_try_XamlTypeInfo.XamlMember xamlMember = null;
            global::Project_try.Project_try_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Project_try.AudioVisual.Article.DefaultViewModel":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisual.Article");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Project_try.Common.ObservableDictionary");
                xamlMember.Getter = get_0_Article_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.AudioVisual.Article.NavigationHelper":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisual.Article");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Project_try.Common.NavigationHelper");
                xamlMember.Getter = get_1_Article_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.AudioVisualMain.DefaultViewModel":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisualMain");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Project_try.Common.ObservableDictionary");
                xamlMember.Getter = get_2_AudioVisualMain_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.AudioVisualMain.NavigationHelper":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisualMain");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Project_try.Common.NavigationHelper");
                xamlMember.Getter = get_3_AudioVisualMain_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.AudioVisual.Interview.DefaultViewModel":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisual.Interview");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Project_try.Common.ObservableDictionary");
                xamlMember.Getter = get_4_Interview_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.AudioVisual.Interview.NavigationHelper":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisual.Interview");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Project_try.Common.NavigationHelper");
                xamlMember.Getter = get_5_Interview_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.AudioVisual.Movie.DefaultViewModel":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisual.Movie");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Project_try.Common.ObservableDictionary");
                xamlMember.Getter = get_6_Movie_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.AudioVisual.Movie.NavigationHelper":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisual.Movie");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Project_try.Common.NavigationHelper");
                xamlMember.Getter = get_7_Movie_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.AudioVisual.Video.DefaultViewModel":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisual.Video");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Project_try.Common.ObservableDictionary");
                xamlMember.Getter = get_8_Video_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.AudioVisual.Video.NavigationHelper":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.AudioVisual.Video");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Project_try.Common.NavigationHelper");
                xamlMember.Getter = get_9_Video_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.Music.SingAloud.DefaultViewModel":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.Music.SingAloud");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Project_try.Common.ObservableDictionary");
                xamlMember.Getter = get_10_SingAloud_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.Music.SingAloud.NavigationHelper":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.Music.SingAloud");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Project_try.Common.NavigationHelper");
                xamlMember.Getter = get_11_SingAloud_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.Music.MusicDestress.DefaultViewModel":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.Music.MusicDestress");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Project_try.Common.ObservableDictionary");
                xamlMember.Getter = get_12_MusicDestress_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.Music.MusicDestress.NavigationHelper":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.Music.MusicDestress");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Project_try.Common.NavigationHelper");
                xamlMember.Getter = get_13_MusicDestress_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.Music.Admiration.DefaultViewModel":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.Music.Admiration");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Project_try.Common.ObservableDictionary");
                xamlMember.Getter = get_14_Admiration_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.Music.Admiration.NavigationHelper":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.Music.Admiration");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Project_try.Common.NavigationHelper");
                xamlMember.Getter = get_15_Admiration_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.Music.MusicHypnosis.DefaultViewModel":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.Music.MusicHypnosis");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Project_try.Common.ObservableDictionary");
                xamlMember.Getter = get_16_MusicHypnosis_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Project_try.Music.MusicHypnosis.NavigationHelper":
                userType = (global::Project_try.Project_try_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Project_try.Music.MusicHypnosis");
                xamlMember = new global::Project_try.Project_try_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Project_try.Common.NavigationHelper");
                xamlMember.Getter = get_17_MusicHypnosis_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Project_try.Project_try_XamlTypeInfo.XamlSystemBaseType
    {
        global::Project_try.Project_try_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Project_try.Project_try_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Project_try.Project_try_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Project_try.Project_try_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}



